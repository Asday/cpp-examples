#if 0 /*
g++ -std=c++23 $0 -o exe -Wall -Werror -Wextra -pedantic-errors \
  && ./exe $@
RET=$?
rm -f exe
exit $RET
*/
#endif

#include <cerrno>
#include <cstring>
#include <iostream>
#include <string>
#include <sys/wait.h>
#include <unistd.h>
#include <vector>

void waitForPID(const pid_t& pid) {
  int status;
  waitpid(pid, &status, WUNTRACED);
}

void run(char* cmd[], char* envp[]) {
  const pid_t pid{fork()};
  if (pid == 0) {
    execve(cmd[0], cmd, envp);
    std::cout << std::strerror(errno) << std::endl;
  }
  else if (pid < 0) std::cout << "fatal: couldn't fork" << std::endl;
  else waitForPID(pid);
}

extern char** environ;

int main() {
  std::cout << "===================== no env" << std::endl;
  char* c1[]{const_cast<char*>("/usr/bin/env"), NULL};
  char* emptyEnv[]{NULL};
  run(c1, emptyEnv);

  std::cout << "===================== own env" << std::endl;
  run(c1, environ);

  std::cout << "===================== shenv" << std::endl;
  char* c2[]{
    const_cast<char*>("/usr/bin/bash"),
    const_cast<char*>("-cl"),
    const_cast<char*>("/usr/bin/env"),
    NULL,
  };
  run(c2, emptyEnv);
}
